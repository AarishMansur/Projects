// A Custom Command Line shell 
#include<stdio.h>
#include<string.h> 
#include<stdlib.h>  
#include<windows.h>

#define LINE 1024
#define AGRS 64

int main(){
char command[LINE];
char *agrs[AGRS];
FILE *file;
file = fopen("file.txt","w");
if(file==NULL){
printf("File does not exist !!");
}
printf("myshell$");
fflush(stdout); // This removes all the buffer 
fgets(command,sizeof(command),stdin);
fprintf(file,"%s",command);

if(strcmp(command,"Exit")==0 || strcmp(command,"exit")==0){
  fclose(file);
  printf("Program ended");
}

else{
  while(1){
    if(fgets(command,sizeof(command),stdin)==NULL){
   printf("\n");
break;
    }
if(stlen(command)==0){
continue;
}
// Parsing the string intotoken
int i=0;
char *token = strtok(command,"\t");
while(token!=NULL && i<ARGS-1){
args[i++] = token;
token = strtok(NULL,"\t\n"); // it keeps return next until token becomes NULL
}
args[i] = NULL;
// Convert args array to a single command string 
char cmdstring[LINE] = "";
for(int j=0;args[j]!=NULL,j++){
strcat(cmdstring,args[j]);
strcat(cmdstring,"");
}
// Create a windows process
STARTUPINFO si = {0}; // Initialize startup info
PROCESS_INFORMATION pi ={0}; // stores process details
si.cb = sizeof(pi); // Required to set the size of struct

if(!CreateProcess(NULL,cmdstring,NULL,NULL,NULL,FALSE,0,NULL,NULL,&si,&pi)){
printf("Error!! Unable to execute command\n");
}
else{
// Wait for process to process to complete 
WaitForSingleObject(pi.hprocess,INFINITE); // Keep the parent wait until child completes 
closeHandle(pi.hprocess); 
closeHandle(pi.hthread);
}
  }
fclose(file);
return 0;
}


